import tkinter as tk
from tkinter import ttk
import yfinance as yf
import mplfinance as mpf
from datetime import datetime

# Constants
TICKERS = [
    "RELIANCE.NS",
    "TCS.NS",
    "INFY.NS",
    "HDFCBANK.NS",
    "ICICIBANK.NS",
    "SBIN.NS",
    "LT.NS",
    "AXISBANK.NS",
    "ITC.NS",
    "HINDUNILVR.NS"
]

STRATEGIES = {
    "Mean Reversion": "mean_reversion",
    "Momentum": "momentum",
    "Statistical Arbitrage": "stat_arb"
}

# Functions
def plot_stock(ticker, start_date, end_date):
    stock_data = yf.download(tickers=ticker, start=start_date, end=end_date)
    if not stock_data.empty:
        mpf.plot(stock_data, type='candle', title=f"The Stock Price of {ticker}", ylabel='Price', ylabel_lower='', volume=True, style='yahoo')
    else:
        print(f"No data found for {ticker}")

def screen_stocks(tickers, strategy):
    screened_tickers = []
    for ticker in tickers:
        stock_data = yf.download(tickers=ticker, start="2024-01-01", end=datetime.today().strftime('%Y-%m-%d'))
        if not stock_data.empty:
            if strategy == "mean_reversion":
                if stock_data['Close'].mean() > stock_data['Close'].std():
                    screened_tickers.append((ticker, "Mean Reversion"))
            elif strategy == "momentum":
                if stock_data['Close'].pct_change().mean() > 0.05:
                    screened_tickers.append((ticker, "Momentum"))
            elif strategy == "stat_arb":
                # Replace this with a valid check for statistical arbitrage
                if stock_data['Close'].std() < 10:
                    screened_tickers.append((ticker, "Statistical Arbitrage"))
    return screened_tickers

# GUI
class StockPlotter:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Stock Plotter")

        # Create frames
        self.frame_tickers = tk.Frame(self.root, bg="#f0f0f0")
        self.frame_tickers.pack(padx=10, pady=10)

        self.frame_strategy = tk.Frame(self.root, bg="#f0f0f0")
        self.frame_strategy.pack(padx=10, pady=10)

        self.frame_plot = tk.Frame(self.root, bg="#f0f0f0")
        self.frame_plot.pack(padx=10, pady=10)

        # Create ticker listbox
        self.listbox_tickers = tk.Listbox(self.frame_tickers, width=20, height=10)
        self.listbox_tickers.pack(side=tk.LEFT, padx=10)

        # Add tickers to listbox
        for ticker in TICKERS:
            self.listbox_tickers.insert(tk.END, ticker)

        # Create strategy combobox
        self.combobox_strategy = ttk.Combobox(self.frame_strategy, values=list(STRATEGIES.keys()))
        self.combobox_strategy.pack(side=tk.LEFT, padx=10)

        # Create plot button
        self.button_plot = tk.Button(self.frame_plot, text="Plot", command=self.plot_stock)
        self.button_plot.pack(side=tk.LEFT, padx=10)

        # Create screen button
        self.button_screen = tk.Button(self.frame_plot, text="Screen", command=self.screen_stocks)
        self.button_screen.pack(side=tk.LEFT)

    def plot_stock(self):
        selected_ticker = self.listbox_tickers.get(self.listbox_tickers.curselection())
        start_date = "2024-01-01"
        end_date = datetime.today().strftime('%Y-%m-%d')
        plot_stock(selected_ticker, start_date, end_date)

    def screen_stocks(self):
        selected_strategy = self.combobox_strategy.get()
        screened_tickers = screen_stocks(TICKERS, STRATEGIES[selected_strategy])
        print(screened_tickers)

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    plotter = StockPlotter()
    plotter.run()